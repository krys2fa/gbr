generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  role          Role      @default(COMPANIES)
  passwordHash  String?
  emailVerified DateTime?
  image         String?
  cases         Case[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
}

model Case {
  id         String     @id @default(cuid())
  ref        String     @unique
  applicant  User       @relation(fields: [applicantId], references: [id])
  applicantId String
  status     CaseStatus @default(SUBMITTED)
  items      GoldItem[]
  payments   Payment[]
  export     Export?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model GoldItem {
  id          String  @id @default(cuid())
  case        Case    @relation(fields: [caseId], references: [id])
  caseId      String
  karat       Int
  weightGrams Float
  impurities  Float    @default(0)
  valuation   Decimal  @db.Decimal(18,2)
}

model Payment {
  id        String   @id @default(cuid())
  case      Case     @relation(fields: [caseId], references: [id])
  caseId    String
  amount    Decimal  @db.Decimal(18,2)
  currency  String   @default("USD")
  method    String
  reference String
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

model Export {
  id           String   @id @default(cuid())
  case         Case     @relation(fields: [caseId], references: [id])
  caseId       String   @unique
  documentNo   String
  destination  String
  createdAt    DateTime @default(now())
}

enum CaseStatus {
  SUBMITTED
  EVALUATED
  APPROVED
  PAID
  EXPORTED
}

enum Role {
  COMPANIES
  AGENT
  CASHIER
  ADMIN
  SUPERADMIN
}

/// Auth.js / Prisma Adapter models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token")
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
